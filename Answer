## General Programming & Computer Science Fundamentals

### Basic Level
1. What is the difference between a process and a thread?
    üß† Process - 
        A process is like a full program running on your computer.
        It has its own memory, resources, and runs independently.
        Example: note pad, Opening Chrome and Spotify‚Äîeach is a separate process.
    üßµ Thread - 
        A thread is a smaller unit inside a process.
        It shares the process‚Äôs memory and resources.
        Multiple threads can run different tasks at the same time within one process.
        Example: In Chrome, one thread loads the page, another handles scrolling, another plays a video.


2. Explain the difference between stack and heap memory.

    Stack Memory --:
        Used for temporary storage like function calls and local variables.
        Memory is automatically managed‚Äîallocated when a function starts, freed when it ends.
        Fast and efficient, but limited in size.
        Example: When you call a function, its variables go on the stack.
    üóÇÔ∏è Heap Memory --:
        Used for dynamic storage like objects or large data structures.
        Memory is manually managed‚Äîyou allocate and free it yourself (or via garbage collection).
        Slower but flexible, with more space.
        Example: When you create an object with new or malloc, it goes on the heap.


3. What are the SOLID principles in software engineering?

    S	Single Responsibility Principle (SRP)	A class should have only one reason to change‚Äîdo one job only.
    O	Open/Closed Principle (OCP)	Software entities should be open for extension but closed for modification.
    L	Liskov Substitution Principle (LSP)	Subclasses should be replaceable with their base classes without breaking the program.
    I	Interface Segregation Principle (ISP)	Clients should not be forced to depend on interfaces they don‚Äôt use.
D	Dependency Inversion Principle (DIP)	High-level modules should depend on abstractions, not on low-level modules.


21. Design a distributed caching system like Redis.
    Sure! Here's a crisp summary of **Redis Cache**:

    - **What it is**:  
    Redis Cache is an **in-memory key-value store** used to **temporarily store frequently accessed data** for ultra-fast retrieval.

    - **Why it's used**:  
    To reduce database load, improve response times, and handle high-throughput requests efficiently.

    - **Common use cases**:
    - Caching API responses
    - Storing user sessions
    - Temporary data like OTPs or tokens
    - Rate limiting and throttling
    - Real-time analytics and leaderboards

    - **How it works**:
    Data is stored in RAM, making reads/writes extremely fast. Redis supports TTL (Time-To-Live) to auto-expire cached entries.
